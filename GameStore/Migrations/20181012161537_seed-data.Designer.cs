// <auto-generated />
using System;
using GameStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameStore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181012161537_seed-data")]
    partial class seeddata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GameStore.Model.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");

                    b.HasData(
                        new { Id = new Guid("f2f8d801-9d7b-4488-95ad-396357931752"), ConcurrencyStamp = "User", Description = "Limited Permission", Name = "User", NormalizedName = "User" },
                        new { Id = new Guid("1ae148d3-587d-4479-bd2c-83984b9e3919"), ConcurrencyStamp = "Admin", Description = "Full Permission", Name = "Admin", NormalizedName = "Admin" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Image");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = new Guid("388b8039-2474-4f6c-952d-de7940492694"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("97b6eb55-75ed-45a3-9976-0b348522fbe4"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("b6894abf-26ec-4a84-b397-4494bb91bc86"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("1e733f80-d9cf-4410-a804-59279a4ace74"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("7aa1b4ac-f827-45d1-acb1-0d195b1325a0"), Image = "Url Image Here", Title = "Title here" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.CategoryGame", b =>
                {
                    b.Property<Guid>("GameId");

                    b.Property<Guid>("CategoryId");

                    b.HasKey("GameId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryGames");

                    b.HasData(
                        new { GameId = new Guid("39accdd9-161a-4fe0-8a10-310f8c98ad93"), CategoryId = new Guid("388b8039-2474-4f6c-952d-de7940492694") },
                        new { GameId = new Guid("f5153e60-15b8-468e-97ae-a01e5188f053"), CategoryId = new Guid("97b6eb55-75ed-45a3-9976-0b348522fbe4") },
                        new { GameId = new Guid("ec1fb6a2-755e-4561-903c-d504845d9475"), CategoryId = new Guid("b6894abf-26ec-4a84-b397-4494bb91bc86") },
                        new { GameId = new Guid("42dfec91-42c7-49f5-b449-b4e22e895088"), CategoryId = new Guid("1e733f80-d9cf-4410-a804-59279a4ace74") },
                        new { GameId = new Guid("8b4ddf45-3956-486b-a2f6-3fec1b3d3048"), CategoryId = new Guid("7aa1b4ac-f827-45d1-acb1-0d195b1325a0") }
                    );
                });

            modelBuilder.Entity("GameStore.Model.FreeCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<Guid>("GameId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("FreeCodes");

                    b.HasData(
                        new { Id = new Guid("40f1dc47-f47b-4cdf-be37-e9c1bfd39ef2"), Code = "152d27bc-33c1-4122-b87c-b8794bdeb6a9", GameId = new Guid("39accdd9-161a-4fe0-8a10-310f8c98ad93") },
                        new { Id = new Guid("bfa3dbae-19ef-4f0d-9b88-bd8d47321fb2"), Code = "69f2aed6-b52e-4fd7-a0ec-3c941fd12208", GameId = new Guid("f5153e60-15b8-468e-97ae-a01e5188f053") },
                        new { Id = new Guid("85c9210a-ed3a-4936-a171-e006d81d66f7"), Code = "a03dfe86-28b3-4541-b0cd-07c9cf40f4ec", GameId = new Guid("ec1fb6a2-755e-4561-903c-d504845d9475") },
                        new { Id = new Guid("578cfe81-2ce2-438f-951e-4d7a272e720b"), Code = "6014cea7-e559-470e-8645-de51e5d18d7f", GameId = new Guid("42dfec91-42c7-49f5-b449-b4e22e895088") },
                        new { Id = new Guid("32d87bf9-25fd-4c8a-878f-de11bc6f6a4b"), Code = "ce7b4bbc-22d7-4c53-80a4-d651a0cb43db", GameId = new Guid("8b4ddf45-3956-486b-a2f6-3fec1b3d3048") }
                    );
                });

            modelBuilder.Entity("GameStore.Model.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("Logo");

                    b.Property<string>("Name");

                    b.Property<float>("Price");

                    b.Property<Guid>("PublisherId");

                    b.Property<float>("Rating");

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<string>("VideoUrl");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");

                    b.HasData(
                        new { Id = new Guid("39accdd9-161a-4fe0-8a10-310f8c98ad93"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("0703a244-3012-4725-b9a5-2e3d5af9f0fe"), Rating = 4.5f, ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), VideoUrl = "URL Video here" },
                        new { Id = new Guid("f5153e60-15b8-468e-97ae-a01e5188f053"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("0e276582-8ca0-4de3-a465-ed721530ae2c"), Rating = 4.5f, ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), VideoUrl = "URL Video here" },
                        new { Id = new Guid("ec1fb6a2-755e-4561-903c-d504845d9475"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("773f8d2e-b12d-4a9f-91d9-9e5da568f0eb"), Rating = 4.5f, ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), VideoUrl = "URL Video here" },
                        new { Id = new Guid("42dfec91-42c7-49f5-b449-b4e22e895088"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("b49d6edb-140d-46cc-bd0b-482be03c8c46"), Rating = 4.5f, ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), VideoUrl = "URL Video here" },
                        new { Id = new Guid("8b4ddf45-3956-486b-a2f6-3fec1b3d3048"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("ca1aca5f-cdee-43a6-bdcb-e596d1b909a5"), Rating = 4.5f, ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), VideoUrl = "URL Video here" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Money");

                    b.Property<string>("Name");

                    b.Property<int>("Reliability");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new { Id = new Guid("0703a244-3012-4725-b9a5-2e3d5af9f0fe"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("0e276582-8ca0-4de3-a465-ed721530ae2c"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("773f8d2e-b12d-4a9f-91d9-9e5da568f0eb"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("b49d6edb-140d-46cc-bd0b-482be03c8c46"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("ca1aca5f-cdee-43a6-bdcb-e596d1b909a5"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("dc23f861-ff43-45af-845c-af4514df22a2"), Money = 10000000, Name = "Name here", Reliability = 5 }
                    );
                });

            modelBuilder.Entity("GameStore.Model.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Expire");

                    b.Property<string>("Token");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("GameStore.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<string>("Hobbies");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new { Id = new Guid("a986b22d-70be-4cc1-a5ac-af06ec5401ef"), AccessFailedCount = 0, ConcurrencyStamp = "f6772774-84b3-41f9-ab4f-6ade999f56fb", Email = "Email@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098509238098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName" },
                        new { Id = new Guid("bc5f30ba-47e7-49ae-8f44-37443db55064"), AccessFailedCount = 0, ConcurrencyStamp = "40e9a4a0-ca50-4cfa-83db-dae7d158d897", Email = "Email1@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098509228098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName1" },
                        new { Id = new Guid("0c55ccca-8bd2-4e54-8454-be78847d8c85"), AccessFailedCount = 0, ConcurrencyStamp = "44e383be-23e8-452f-b0a1-29da135b4302", Email = "Email2@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098559238098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName2" },
                        new { Id = new Guid("d180ad76-1c84-430b-8889-f8df64bc7251"), AccessFailedCount = 0, ConcurrencyStamp = "856038b7-f8fe-4461-bd99-cef4f4e12c63", Email = "Email3@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098609238098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName3" },
                        new { Id = new Guid("6eaf3521-3277-4db7-ad91-924db908ffcf"), AccessFailedCount = 0, ConcurrencyStamp = "18deecaf-7278-4296-87d2-833e9f11bef4", Email = "Email4@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098509738098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName4" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.UserGame", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GameId");

                    b.Property<DateTime>("PurchaseDate");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("UserGames");

                    b.HasData(
                        new { UserId = new Guid("a986b22d-70be-4cc1-a5ac-af06ec5401ef"), GameId = new Guid("39accdd9-161a-4fe0-8a10-310f8c98ad93"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { UserId = new Guid("bc5f30ba-47e7-49ae-8f44-37443db55064"), GameId = new Guid("f5153e60-15b8-468e-97ae-a01e5188f053"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { UserId = new Guid("0c55ccca-8bd2-4e54-8454-be78847d8c85"), GameId = new Guid("ec1fb6a2-755e-4561-903c-d504845d9475"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { UserId = new Guid("d180ad76-1c84-430b-8889-f8df64bc7251"), GameId = new Guid("42dfec91-42c7-49f5-b449-b4e22e895088"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { UserId = new Guid("6eaf3521-3277-4db7-ad91-924db908ffcf"), GameId = new Guid("8b4ddf45-3956-486b-a2f6-3fec1b3d3048"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("GameStore.Model.WishGame", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GameId");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("WishGame");

                    b.HasData(
                        new { UserId = new Guid("a986b22d-70be-4cc1-a5ac-af06ec5401ef"), GameId = new Guid("39accdd9-161a-4fe0-8a10-310f8c98ad93") },
                        new { UserId = new Guid("bc5f30ba-47e7-49ae-8f44-37443db55064"), GameId = new Guid("f5153e60-15b8-468e-97ae-a01e5188f053") },
                        new { UserId = new Guid("0c55ccca-8bd2-4e54-8454-be78847d8c85"), GameId = new Guid("ec1fb6a2-755e-4561-903c-d504845d9475") },
                        new { UserId = new Guid("d180ad76-1c84-430b-8889-f8df64bc7251"), GameId = new Guid("42dfec91-42c7-49f5-b449-b4e22e895088") },
                        new { UserId = new Guid("6eaf3521-3277-4db7-ad91-924db908ffcf"), GameId = new Guid("8b4ddf45-3956-486b-a2f6-3fec1b3d3048") }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GameStore.Model.CategoryGame", b =>
                {
                    b.HasOne("GameStore.Model.Category", "Category")
                        .WithMany("Games")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("Categories")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.FreeCode", b =>
                {
                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("FreeCodes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.Game", b =>
                {
                    b.HasOne("GameStore.Model.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.RefreshToken", b =>
                {
                    b.HasOne("GameStore.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.UserGame", b =>
                {
                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("Members")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.User", "User")
                        .WithMany("Games")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.WishGame", b =>
                {
                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("FavoriteMembers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.User", "User")
                        .WithMany("WishGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
