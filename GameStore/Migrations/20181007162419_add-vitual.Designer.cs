// <auto-generated />
using System;
using GameStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameStore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181007162419_add-vitual")]
    partial class addvitual
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GameStore.Model.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");

                    b.HasData(
                        new { Id = new Guid("0984936d-7b21-47a0-a887-d530dca0c2af"), ConcurrencyStamp = "User", Description = "Limited Permission", Name = "User", NormalizedName = "User" },
                        new { Id = new Guid("5342bdfd-9b08-44ab-89a7-65175063ed61"), ConcurrencyStamp = "Admin", Description = "Full Permission", Name = "Admin", NormalizedName = "Admin" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Image");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = new Guid("c044a561-a4cc-46ce-b60e-44ee715e5387"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("abb78c40-f50a-4654-bd34-b5f880320ac9"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("b7be593e-8c3b-4065-87cf-549e93388388"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("677f4b2c-fd57-47b6-8de1-b291b76e907c"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("206da7db-4d6d-4a47-8ec1-6ebc0c67db11"), Image = "Url Image Here", Title = "Title here" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.CategoryGame", b =>
                {
                    b.Property<Guid>("GameId");

                    b.Property<Guid>("CategoryId");

                    b.HasKey("GameId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryGames");

                    b.HasData(
                        new { GameId = new Guid("7a9bbfa0-be7d-4b73-8029-19625b50442e"), CategoryId = new Guid("c044a561-a4cc-46ce-b60e-44ee715e5387") },
                        new { GameId = new Guid("e34a66ea-d633-4786-a32a-783f7d5fd3a7"), CategoryId = new Guid("abb78c40-f50a-4654-bd34-b5f880320ac9") },
                        new { GameId = new Guid("7bb680d1-9bfd-4c8b-9a1b-35b69f7165c6"), CategoryId = new Guid("b7be593e-8c3b-4065-87cf-549e93388388") },
                        new { GameId = new Guid("c0e5d622-bf12-493d-82ee-fbbc48ae1121"), CategoryId = new Guid("677f4b2c-fd57-47b6-8de1-b291b76e907c") },
                        new { GameId = new Guid("872f8cff-1be2-4c68-89f6-f68afc957df9"), CategoryId = new Guid("206da7db-4d6d-4a47-8ec1-6ebc0c67db11") }
                    );
                });

            modelBuilder.Entity("GameStore.Model.CodeFree", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<Guid>("GameId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("CodeFrees");

                    b.HasData(
                        new { Id = new Guid("a3bcceca-9c1a-4c38-abac-4e3ee17a2acc"), Code = "56da0ec5-42e8-4044-8354-fb120acea189", GameId = new Guid("7a9bbfa0-be7d-4b73-8029-19625b50442e") },
                        new { Id = new Guid("b0559124-f314-40b8-aa66-5902ede5cbed"), Code = "b4ba3419-794f-4d02-8310-c9e71ea30793", GameId = new Guid("e34a66ea-d633-4786-a32a-783f7d5fd3a7") },
                        new { Id = new Guid("8a7aabfc-64b9-4e3c-aac5-419728a7c87c"), Code = "31b8964c-1c6d-4d0a-943e-108f5d9b7768", GameId = new Guid("7bb680d1-9bfd-4c8b-9a1b-35b69f7165c6") },
                        new { Id = new Guid("beccfa44-626d-4074-bc85-db6df980e7b0"), Code = "683f852f-d4ad-4956-a425-6edb36940587", GameId = new Guid("c0e5d622-bf12-493d-82ee-fbbc48ae1121") },
                        new { Id = new Guid("8854734d-bf30-4817-956b-3d1a6e46459e"), Code = "c3b34bf8-6faa-48e4-bd4d-c6f3ec31feb6", GameId = new Guid("872f8cff-1be2-4c68-89f6-f68afc957df9") }
                    );
                });

            modelBuilder.Entity("GameStore.Model.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("Logo");

                    b.Property<string>("Name");

                    b.Property<float>("Price");

                    b.Property<Guid>("PublisherId");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<float>("Rating");

                    b.Property<string>("VideoUrl");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");

                    b.HasData(
                        new { Id = new Guid("7a9bbfa0-be7d-4b73-8029-19625b50442e"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("558e68d3-ac8d-4b34-a41d-340ff0e1eb92"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Rating = 4.5f, VideoUrl = "URL Video here" },
                        new { Id = new Guid("e34a66ea-d633-4786-a32a-783f7d5fd3a7"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("e18eea4b-992e-438d-9e3c-7522018fc629"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Rating = 4.5f, VideoUrl = "URL Video here" },
                        new { Id = new Guid("7bb680d1-9bfd-4c8b-9a1b-35b69f7165c6"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("7aa72e40-d2a7-4726-a294-08abb48535bc"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Rating = 4.5f, VideoUrl = "URL Video here" },
                        new { Id = new Guid("c0e5d622-bf12-493d-82ee-fbbc48ae1121"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("805d05cb-81cf-4941-8b79-b4d5ce41bb75"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Rating = 4.5f, VideoUrl = "URL Video here" },
                        new { Id = new Guid("872f8cff-1be2-4c68-89f6-f68afc957df9"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("20077c42-3d31-4444-8690-cabe5a2f276f"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Rating = 4.5f, VideoUrl = "URL Video here" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Money");

                    b.Property<string>("Name");

                    b.Property<int>("Reliability");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new { Id = new Guid("558e68d3-ac8d-4b34-a41d-340ff0e1eb92"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("e18eea4b-992e-438d-9e3c-7522018fc629"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("7aa72e40-d2a7-4726-a294-08abb48535bc"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("805d05cb-81cf-4941-8b79-b4d5ce41bb75"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("20077c42-3d31-4444-8690-cabe5a2f276f"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("ee1c0ac7-7ade-40eb-a05e-b1e72428396c"), Money = 10000000, Name = "Name here", Reliability = 5 }
                    );
                });

            modelBuilder.Entity("GameStore.Model.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Expire");

                    b.Property<string>("Token");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("GameStore.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<string>("Hobbies");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new { Id = new Guid("beed1a4f-8218-4ef0-8418-11c51f29499a"), AccessFailedCount = 0, ConcurrencyStamp = "607825a7-9360-4fc2-a882-bc36161aa379", Email = "Email@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098509238098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName" },
                        new { Id = new Guid("e18b89f8-1f05-4a9d-b192-9cd59c9b2f30"), AccessFailedCount = 0, ConcurrencyStamp = "53345f54-c74f-4a0b-9f52-0db2b5d3c328", Email = "Email1@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098509228098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName1" },
                        new { Id = new Guid("359d7ca0-484e-4972-b93f-69c34cdb9fc2"), AccessFailedCount = 0, ConcurrencyStamp = "31119051-6320-4b1b-ac70-966acfe90020", Email = "Email2@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098559238098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName2" },
                        new { Id = new Guid("41973f50-7b9a-48fe-ba2f-bdebc1c793bd"), AccessFailedCount = 0, ConcurrencyStamp = "b16198c3-e19f-4d8f-b905-a024c6dab847", Email = "Email3@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098609238098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName3" },
                        new { Id = new Guid("fa58401d-2e2a-417e-bd29-1d13c832cadf"), AccessFailedCount = 0, ConcurrencyStamp = "06dd30aa-5ea6-4ee5-93e6-cb1b112d3938", Email = "Email4@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098509738098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName4" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.UserGame", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GameId");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("UserGames");

                    b.HasData(
                        new { UserId = new Guid("beed1a4f-8218-4ef0-8418-11c51f29499a"), GameId = new Guid("7a9bbfa0-be7d-4b73-8029-19625b50442e") },
                        new { UserId = new Guid("e18b89f8-1f05-4a9d-b192-9cd59c9b2f30"), GameId = new Guid("e34a66ea-d633-4786-a32a-783f7d5fd3a7") },
                        new { UserId = new Guid("359d7ca0-484e-4972-b93f-69c34cdb9fc2"), GameId = new Guid("7bb680d1-9bfd-4c8b-9a1b-35b69f7165c6") },
                        new { UserId = new Guid("41973f50-7b9a-48fe-ba2f-bdebc1c793bd"), GameId = new Guid("c0e5d622-bf12-493d-82ee-fbbc48ae1121") },
                        new { UserId = new Guid("fa58401d-2e2a-417e-bd29-1d13c832cadf"), GameId = new Guid("872f8cff-1be2-4c68-89f6-f68afc957df9") }
                    );
                });

            modelBuilder.Entity("GameStore.Model.WishGame", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GameId");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("WishGame");

                    b.HasData(
                        new { UserId = new Guid("beed1a4f-8218-4ef0-8418-11c51f29499a"), GameId = new Guid("7a9bbfa0-be7d-4b73-8029-19625b50442e") },
                        new { UserId = new Guid("e18b89f8-1f05-4a9d-b192-9cd59c9b2f30"), GameId = new Guid("e34a66ea-d633-4786-a32a-783f7d5fd3a7") },
                        new { UserId = new Guid("359d7ca0-484e-4972-b93f-69c34cdb9fc2"), GameId = new Guid("7bb680d1-9bfd-4c8b-9a1b-35b69f7165c6") },
                        new { UserId = new Guid("41973f50-7b9a-48fe-ba2f-bdebc1c793bd"), GameId = new Guid("c0e5d622-bf12-493d-82ee-fbbc48ae1121") },
                        new { UserId = new Guid("fa58401d-2e2a-417e-bd29-1d13c832cadf"), GameId = new Guid("872f8cff-1be2-4c68-89f6-f68afc957df9") }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GameStore.Model.CategoryGame", b =>
                {
                    b.HasOne("GameStore.Model.Category", "Category")
                        .WithMany("Games")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("Categories")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.CodeFree", b =>
                {
                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("FreeCodes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.Game", b =>
                {
                    b.HasOne("GameStore.Model.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.RefreshToken", b =>
                {
                    b.HasOne("GameStore.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.UserGame", b =>
                {
                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("Members")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.User", "User")
                        .WithMany("Games")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.WishGame", b =>
                {
                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("FavoriteMembers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.User", "User")
                        .WithMany("WishGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
