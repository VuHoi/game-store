// <auto-generated />
using System;
using GameStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameStore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181007090724_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GameStore.Model.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");

                    b.HasData(
                        new { Id = new Guid("cb66fd09-7f5e-4256-be11-5c2a930034a3"), ConcurrencyStamp = "User", Description = "Limited Permission", Name = "User", NormalizedName = "User" },
                        new { Id = new Guid("655fdb63-3a70-43fa-8f5b-19805a3a1a3b"), ConcurrencyStamp = "Admin", Description = "Full Permission", Name = "Admin", NormalizedName = "Admin" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Image");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = new Guid("a1ec28eb-b936-4aed-bb98-be9be1fd40bc"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("98324ec4-1cf2-46dd-b624-607c1173cb8e"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("eb71c1ee-da51-4522-9b8e-34d9ddf41160"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("a914b203-ed21-465e-8694-dd298bfbce8b"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("1472c046-1a0c-4fbf-9a35-daa19aff67fb"), Image = "Url Image Here", Title = "Title here" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.CategoryGame", b =>
                {
                    b.Property<Guid>("GameId");

                    b.Property<Guid>("CategoryId");

                    b.HasKey("GameId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryGames");

                    b.HasData(
                        new { GameId = new Guid("ea0c2397-5afc-458e-98ab-b1deeeff5f94"), CategoryId = new Guid("a1ec28eb-b936-4aed-bb98-be9be1fd40bc") },
                        new { GameId = new Guid("c0836667-eb7e-49e0-ae05-f39d77ed4790"), CategoryId = new Guid("98324ec4-1cf2-46dd-b624-607c1173cb8e") },
                        new { GameId = new Guid("8b70210e-b8d8-43b3-8fc5-6af7c9ecffce"), CategoryId = new Guid("eb71c1ee-da51-4522-9b8e-34d9ddf41160") },
                        new { GameId = new Guid("dbb7aa2f-9068-4369-a7ba-0e4315de6b76"), CategoryId = new Guid("a914b203-ed21-465e-8694-dd298bfbce8b") },
                        new { GameId = new Guid("b512100c-048b-4dd8-be62-571fe19df064"), CategoryId = new Guid("1472c046-1a0c-4fbf-9a35-daa19aff67fb") }
                    );
                });

            modelBuilder.Entity("GameStore.Model.CodeFree", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<Guid>("GameId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("CodeFrees");

                    b.HasData(
                        new { Id = new Guid("0518e5b0-7ae7-41b6-8d33-657186cbf171"), Code = "d6957685-745d-407f-8b0d-0bad699a2190", GameId = new Guid("ea0c2397-5afc-458e-98ab-b1deeeff5f94") },
                        new { Id = new Guid("1dcec842-a150-4767-a0fa-9ca082e01932"), Code = "a026e7cf-c9b3-43d4-abcd-2f2c82513e4b", GameId = new Guid("c0836667-eb7e-49e0-ae05-f39d77ed4790") },
                        new { Id = new Guid("83864b18-ad0b-43d9-a5a8-ea787accdbb3"), Code = "34bf310a-d813-4821-ba32-9f1844632617", GameId = new Guid("8b70210e-b8d8-43b3-8fc5-6af7c9ecffce") },
                        new { Id = new Guid("a5450eab-127b-413d-843e-c3a1ceb2f78d"), Code = "a033b179-5152-4358-a5f2-915419b07a2c", GameId = new Guid("dbb7aa2f-9068-4369-a7ba-0e4315de6b76") },
                        new { Id = new Guid("3c9a8de5-86fa-427d-9ee6-9822d91d801d"), Code = "5c35dfe6-45a6-4a68-91fc-f9c6d5c66bc1", GameId = new Guid("b512100c-048b-4dd8-be62-571fe19df064") }
                    );
                });

            modelBuilder.Entity("GameStore.Model.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("Logo");

                    b.Property<string>("Name");

                    b.Property<float>("Price");

                    b.Property<Guid>("PublisherId");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<float>("Rating");

                    b.Property<string>("VideoUrl");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");

                    b.HasData(
                        new { Id = new Guid("ea0c2397-5afc-458e-98ab-b1deeeff5f94"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("73ccb3bf-e574-4b61-afbd-5de30f31e525"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Rating = 4.5f, VideoUrl = "URL Video here" },
                        new { Id = new Guid("c0836667-eb7e-49e0-ae05-f39d77ed4790"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("a4745dd1-4787-4a26-a229-9925ccd09718"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Rating = 4.5f, VideoUrl = "URL Video here" },
                        new { Id = new Guid("8b70210e-b8d8-43b3-8fc5-6af7c9ecffce"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("ea1a70c2-868a-410d-b7ec-5f5a5703fcb0"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Rating = 4.5f, VideoUrl = "URL Video here" },
                        new { Id = new Guid("dbb7aa2f-9068-4369-a7ba-0e4315de6b76"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("1b990994-0fbb-4a82-8af1-ba3e5302dc5b"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Rating = 4.5f, VideoUrl = "URL Video here" },
                        new { Id = new Guid("b512100c-048b-4dd8-be62-571fe19df064"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("10ede6b4-86d7-407d-adc0-eeba77cd2c41"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Rating = 4.5f, VideoUrl = "URL Video here" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Money");

                    b.Property<string>("Name");

                    b.Property<int>("Reliability");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new { Id = new Guid("73ccb3bf-e574-4b61-afbd-5de30f31e525"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("a4745dd1-4787-4a26-a229-9925ccd09718"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("ea1a70c2-868a-410d-b7ec-5f5a5703fcb0"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("1b990994-0fbb-4a82-8af1-ba3e5302dc5b"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("10ede6b4-86d7-407d-adc0-eeba77cd2c41"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("54295299-1b42-49b6-9560-e937e93f6398"), Money = 10000000, Name = "Name here", Reliability = 5 }
                    );
                });

            modelBuilder.Entity("GameStore.Model.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Expire");

                    b.Property<string>("Token");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("GameStore.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<string>("Hobbies");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new { Id = new Guid("a403753c-dd6f-4cea-8fab-418b0626f20b"), AccessFailedCount = 0, ConcurrencyStamp = "9c06a449-f0c8-40c4-934c-33fef1e35375", Email = "Email@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098509238098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName" },
                        new { Id = new Guid("56dc3db2-b72f-4679-98b2-8ce755bebae7"), AccessFailedCount = 0, ConcurrencyStamp = "c7130487-1d9f-40d6-b233-ba168264a902", Email = "Email1@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098509228098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName1" },
                        new { Id = new Guid("06229f71-88ef-4fd7-9349-31133d072665"), AccessFailedCount = 0, ConcurrencyStamp = "bcf57312-af48-4953-9a88-21ef729cc9df", Email = "Email2@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098559238098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName2" },
                        new { Id = new Guid("15c556b4-6fab-469a-a8dc-6a5adb98984e"), AccessFailedCount = 0, ConcurrencyStamp = "6f7c3a44-a3e7-4ac8-9bfe-0deca0c8dc8f", Email = "Email3@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098609238098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName3" },
                        new { Id = new Guid("45afb091-8c2b-48d8-a8c9-75a8818bed77"), AccessFailedCount = 0, ConcurrencyStamp = "191a8ea5-d17a-4493-8d55-5cf3aa1d103d", Email = "Email4@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098509738098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName4" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.UserGame", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GameId");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("UserGames");

                    b.HasData(
                        new { UserId = new Guid("a403753c-dd6f-4cea-8fab-418b0626f20b"), GameId = new Guid("ea0c2397-5afc-458e-98ab-b1deeeff5f94") },
                        new { UserId = new Guid("56dc3db2-b72f-4679-98b2-8ce755bebae7"), GameId = new Guid("c0836667-eb7e-49e0-ae05-f39d77ed4790") },
                        new { UserId = new Guid("06229f71-88ef-4fd7-9349-31133d072665"), GameId = new Guid("8b70210e-b8d8-43b3-8fc5-6af7c9ecffce") },
                        new { UserId = new Guid("15c556b4-6fab-469a-a8dc-6a5adb98984e"), GameId = new Guid("dbb7aa2f-9068-4369-a7ba-0e4315de6b76") },
                        new { UserId = new Guid("45afb091-8c2b-48d8-a8c9-75a8818bed77"), GameId = new Guid("b512100c-048b-4dd8-be62-571fe19df064") }
                    );
                });

            modelBuilder.Entity("GameStore.Model.WishGame", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GameId");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("WishGame");

                    b.HasData(
                        new { UserId = new Guid("a403753c-dd6f-4cea-8fab-418b0626f20b"), GameId = new Guid("ea0c2397-5afc-458e-98ab-b1deeeff5f94") },
                        new { UserId = new Guid("56dc3db2-b72f-4679-98b2-8ce755bebae7"), GameId = new Guid("c0836667-eb7e-49e0-ae05-f39d77ed4790") },
                        new { UserId = new Guid("06229f71-88ef-4fd7-9349-31133d072665"), GameId = new Guid("8b70210e-b8d8-43b3-8fc5-6af7c9ecffce") },
                        new { UserId = new Guid("15c556b4-6fab-469a-a8dc-6a5adb98984e"), GameId = new Guid("dbb7aa2f-9068-4369-a7ba-0e4315de6b76") },
                        new { UserId = new Guid("45afb091-8c2b-48d8-a8c9-75a8818bed77"), GameId = new Guid("b512100c-048b-4dd8-be62-571fe19df064") }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GameStore.Model.CategoryGame", b =>
                {
                    b.HasOne("GameStore.Model.Category", "Category")
                        .WithMany("Games")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("Categories")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.CodeFree", b =>
                {
                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("FreeCodes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.Game", b =>
                {
                    b.HasOne("GameStore.Model.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.RefreshToken", b =>
                {
                    b.HasOne("GameStore.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.UserGame", b =>
                {
                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("Members")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.User", "User")
                        .WithMany("Games")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.WishGame", b =>
                {
                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("FavoriteMembers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.User", "User")
                        .WithMany("WishGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
