// <auto-generated />
using System;
using GameStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameStore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181014080339_seed-data2")]
    partial class seeddata2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GameStore.Model.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");

                    b.HasData(
                        new { Id = new Guid("afc17676-7360-466b-b19e-61c135460299"), ConcurrencyStamp = "User", Description = "Limited Permission", Name = "User", NormalizedName = "User" },
                        new { Id = new Guid("9286b375-dd76-4506-a4e6-d839ded95dc4"), ConcurrencyStamp = "Admin", Description = "Full Permission", Name = "Admin", NormalizedName = "Admin" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Image");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = new Guid("d723b944-d295-457b-b2ea-68775843dc8a"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("5482f380-50af-477c-993d-e20a96f56256"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("7e623d51-bd34-4d45-a7ad-af6f77e27b62"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("82005dcf-7ccd-4182-affa-8403cc2bba40"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("e2169b4c-5d95-4f5b-a72f-f58c389ce434"), Image = "Url Image Here", Title = "Title here" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.CategoryGame", b =>
                {
                    b.Property<Guid>("GameId");

                    b.Property<Guid>("CategoryId");

                    b.HasKey("GameId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryGames");

                    b.HasData(
                        new { GameId = new Guid("e2631a6f-7dc8-4956-965e-5f196026c3ad"), CategoryId = new Guid("d723b944-d295-457b-b2ea-68775843dc8a") },
                        new { GameId = new Guid("ff03c0d4-d88a-4a8f-ade8-b57b7708d4c7"), CategoryId = new Guid("5482f380-50af-477c-993d-e20a96f56256") },
                        new { GameId = new Guid("c780fa77-d689-4a13-b879-a7f83a838070"), CategoryId = new Guid("7e623d51-bd34-4d45-a7ad-af6f77e27b62") },
                        new { GameId = new Guid("b17fabcf-461f-4eb4-a5a8-c9de46a3ea73"), CategoryId = new Guid("82005dcf-7ccd-4182-affa-8403cc2bba40") },
                        new { GameId = new Guid("e414012f-1b42-4bee-a72b-4398f2b60a14"), CategoryId = new Guid("e2169b4c-5d95-4f5b-a72f-f58c389ce434") }
                    );
                });

            modelBuilder.Entity("GameStore.Model.FreeCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<Guid>("GameId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("FreeCodes");

                    b.HasData(
                        new { Id = new Guid("768c5a72-b34b-419b-a276-0364b22eb53c"), Code = "5010a5ac-fdee-4a1c-80e2-8cbfb57f4785", GameId = new Guid("e2631a6f-7dc8-4956-965e-5f196026c3ad") },
                        new { Id = new Guid("de233f16-5c92-4248-8916-ae5227d50b4b"), Code = "03b71e20-13af-40b5-9c44-0610aa733ec4", GameId = new Guid("ff03c0d4-d88a-4a8f-ade8-b57b7708d4c7") },
                        new { Id = new Guid("cf6fb8f9-e196-4891-9364-c34dc68fe556"), Code = "732f0c63-89c8-4ac7-8dc3-53ab8addbff9", GameId = new Guid("c780fa77-d689-4a13-b879-a7f83a838070") },
                        new { Id = new Guid("6b94459f-32da-496e-95b5-4389392d8b5f"), Code = "dbdc3c5c-e3bc-4be9-a1c1-82dc3810a7c8", GameId = new Guid("b17fabcf-461f-4eb4-a5a8-c9de46a3ea73") },
                        new { Id = new Guid("e2e95a94-1621-4ae7-9300-a151e5bbd6a5"), Code = "9af0b0c3-bd26-4409-a2f3-4e1800cb9d79", GameId = new Guid("e414012f-1b42-4bee-a72b-4398f2b60a14") }
                    );
                });

            modelBuilder.Entity("GameStore.Model.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("Logo");

                    b.Property<string>("Name");

                    b.Property<float>("Price");

                    b.Property<Guid>("PublisherId");

                    b.Property<float>("Rating");

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<string>("VideoUrl");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");

                    b.HasData(
                        new { Id = new Guid("e2631a6f-7dc8-4956-965e-5f196026c3ad"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("f59bacb7-3032-4711-8f2e-36c8123c0527"), Rating = 4.5f, ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), VideoUrl = "URL Video here" },
                        new { Id = new Guid("ff03c0d4-d88a-4a8f-ade8-b57b7708d4c7"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("06a2a15f-34fd-4787-b8d6-7eda3e4f7f07"), Rating = 4.5f, ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), VideoUrl = "URL Video here" },
                        new { Id = new Guid("c780fa77-d689-4a13-b879-a7f83a838070"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("75cf0ab5-0b07-4e56-ace2-62297ff2e3de"), Rating = 4.5f, ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), VideoUrl = "URL Video here" },
                        new { Id = new Guid("b17fabcf-461f-4eb4-a5a8-c9de46a3ea73"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("b7c91955-d125-4ffc-b856-a689d26ac073"), Rating = 4.5f, ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), VideoUrl = "URL Video here" },
                        new { Id = new Guid("e414012f-1b42-4bee-a72b-4398f2b60a14"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("09716228-bd11-4bd9-94fb-cf25a037ef46"), Rating = 4.5f, ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), VideoUrl = "URL Video here" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Money");

                    b.Property<string>("Name");

                    b.Property<int>("Reliability");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new { Id = new Guid("f59bacb7-3032-4711-8f2e-36c8123c0527"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("06a2a15f-34fd-4787-b8d6-7eda3e4f7f07"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("75cf0ab5-0b07-4e56-ace2-62297ff2e3de"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("b7c91955-d125-4ffc-b856-a689d26ac073"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("09716228-bd11-4bd9-94fb-cf25a037ef46"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("915da842-62bc-4f4e-9c1f-73a20c18f01c"), Money = 10000000, Name = "Name here", Reliability = 5 }
                    );
                });

            modelBuilder.Entity("GameStore.Model.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Expire");

                    b.Property<string>("Token");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("GameStore.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<string>("Hobbies");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new { Id = new Guid("9a2abfb7-00a9-4361-97bc-31413aa0eb66"), AccessFailedCount = 0, ConcurrencyStamp = "f1b14ecf-bbe2-4d03-9a64-bbe2dd7b43b6", Email = "Email@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098509238098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName" },
                        new { Id = new Guid("fdfa6328-3798-48f7-a03b-3e751950a1a4"), AccessFailedCount = 0, ConcurrencyStamp = "ad795d56-a7db-4d75-adc8-354eada9e5eb", Email = "Email1@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098509228098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName1" },
                        new { Id = new Guid("24071d67-4d6d-4d9d-958d-ccb73cd6fa90"), AccessFailedCount = 0, ConcurrencyStamp = "d6e8f12a-3d8b-4690-a667-9645a7cda028", Email = "Email2@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098559238098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName2" },
                        new { Id = new Guid("1b1adaa5-95a0-415e-9f40-0bc8c925d31a"), AccessFailedCount = 0, ConcurrencyStamp = "f1a828c6-7ae7-4644-a016-c84512bac18e", Email = "Email3@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098609238098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName3" },
                        new { Id = new Guid("2b0c1a6e-6880-4376-9a58-2030323f4f99"), AccessFailedCount = 0, ConcurrencyStamp = "ee76fa96-e17f-4329-8c47-0f8ee366289c", Email = "Email4@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098509738098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName4" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.UserGame", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GameId");

                    b.Property<DateTime>("PurchaseDate");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("UserGames");

                    b.HasData(
                        new { UserId = new Guid("9a2abfb7-00a9-4361-97bc-31413aa0eb66"), GameId = new Guid("e2631a6f-7dc8-4956-965e-5f196026c3ad"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { UserId = new Guid("fdfa6328-3798-48f7-a03b-3e751950a1a4"), GameId = new Guid("ff03c0d4-d88a-4a8f-ade8-b57b7708d4c7"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { UserId = new Guid("24071d67-4d6d-4d9d-958d-ccb73cd6fa90"), GameId = new Guid("c780fa77-d689-4a13-b879-a7f83a838070"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { UserId = new Guid("1b1adaa5-95a0-415e-9f40-0bc8c925d31a"), GameId = new Guid("b17fabcf-461f-4eb4-a5a8-c9de46a3ea73"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { UserId = new Guid("2b0c1a6e-6880-4376-9a58-2030323f4f99"), GameId = new Guid("e414012f-1b42-4bee-a72b-4398f2b60a14"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("GameStore.Model.WishGame", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GameId");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("WishGame");

                    b.HasData(
                        new { UserId = new Guid("9a2abfb7-00a9-4361-97bc-31413aa0eb66"), GameId = new Guid("e2631a6f-7dc8-4956-965e-5f196026c3ad") },
                        new { UserId = new Guid("fdfa6328-3798-48f7-a03b-3e751950a1a4"), GameId = new Guid("ff03c0d4-d88a-4a8f-ade8-b57b7708d4c7") },
                        new { UserId = new Guid("24071d67-4d6d-4d9d-958d-ccb73cd6fa90"), GameId = new Guid("c780fa77-d689-4a13-b879-a7f83a838070") },
                        new { UserId = new Guid("1b1adaa5-95a0-415e-9f40-0bc8c925d31a"), GameId = new Guid("b17fabcf-461f-4eb4-a5a8-c9de46a3ea73") },
                        new { UserId = new Guid("2b0c1a6e-6880-4376-9a58-2030323f4f99"), GameId = new Guid("e414012f-1b42-4bee-a72b-4398f2b60a14") }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GameStore.Model.CategoryGame", b =>
                {
                    b.HasOne("GameStore.Model.Category", "Category")
                        .WithMany("Games")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("Categories")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.FreeCode", b =>
                {
                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("FreeCodes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.Game", b =>
                {
                    b.HasOne("GameStore.Model.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.RefreshToken", b =>
                {
                    b.HasOne("GameStore.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.UserGame", b =>
                {
                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("Members")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.User", "User")
                        .WithMany("Games")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.WishGame", b =>
                {
                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("FavoriteMembers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.User", "User")
                        .WithMany("WishGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
