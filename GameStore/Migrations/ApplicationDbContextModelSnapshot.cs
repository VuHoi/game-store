// <auto-generated />
using System;
using GameStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameStore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GameStore.Model.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");

                    b.HasData(
                        new { Id = new Guid("5f752fa3-e38a-4120-8b1e-a71de657505f"), ConcurrencyStamp = "User", Description = "Limited Permission", Name = "User", NormalizedName = "User" },
                        new { Id = new Guid("17ff0c11-68f8-4fed-a7ab-bd67d056e487"), ConcurrencyStamp = "Admin", Description = "Full Permission", Name = "Admin", NormalizedName = "Admin" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ImageId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = new Guid("e9c798f4-073b-4bc9-931c-4623906386ff"), ImageId = new Guid("00000000-0000-0000-0000-000000000000"), Title = "Title here" },
                        new { Id = new Guid("0fb54ba5-f2e7-4e28-9740-3336a5d9d494"), ImageId = new Guid("00000000-0000-0000-0000-000000000000"), Title = "Title here" },
                        new { Id = new Guid("d609ed22-d617-4e71-b3c4-f2906883c325"), ImageId = new Guid("00000000-0000-0000-0000-000000000000"), Title = "Title here" },
                        new { Id = new Guid("019fe3c6-25b8-4b00-8647-a8a84a61bbc8"), ImageId = new Guid("00000000-0000-0000-0000-000000000000"), Title = "Title here" },
                        new { Id = new Guid("6ae485f2-9d6e-4b62-8965-50e9a91ad58a"), ImageId = new Guid("00000000-0000-0000-0000-000000000000"), Title = "Title here" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.CategoryGame", b =>
                {
                    b.Property<Guid>("GameId");

                    b.Property<Guid>("CategoryId");

                    b.HasKey("GameId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryGames");

                    b.HasData(
                        new { GameId = new Guid("d6995fd6-da72-4c31-aa75-f72bf7e9a5eb"), CategoryId = new Guid("e9c798f4-073b-4bc9-931c-4623906386ff") },
                        new { GameId = new Guid("ff6d2d5a-8621-46db-84fd-e40155c975a1"), CategoryId = new Guid("0fb54ba5-f2e7-4e28-9740-3336a5d9d494") },
                        new { GameId = new Guid("00079ebc-97be-4649-a8b8-73833c949d6d"), CategoryId = new Guid("d609ed22-d617-4e71-b3c4-f2906883c325") },
                        new { GameId = new Guid("e4a83ca4-2859-419f-84c6-09e9fc293e89"), CategoryId = new Guid("019fe3c6-25b8-4b00-8647-a8a84a61bbc8") },
                        new { GameId = new Guid("f27c9614-ee32-47cf-8c26-861d65e6a18c"), CategoryId = new Guid("6ae485f2-9d6e-4b62-8965-50e9a91ad58a") }
                    );
                });

            modelBuilder.Entity("GameStore.Model.FreeCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<Guid>("GameId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("FreeCodes");

                    b.HasData(
                        new { Id = new Guid("cee32ec3-0522-4a2c-bf65-c33e664c7e26"), Code = "dba5e8ad-150e-4368-a2d3-537c67f89312", GameId = new Guid("d6995fd6-da72-4c31-aa75-f72bf7e9a5eb") },
                        new { Id = new Guid("ea6afb1b-b8f2-458f-9bf9-79344f06f027"), Code = "b34ffc7a-0ac2-4a7c-9e88-794f4b5d10f2", GameId = new Guid("ff6d2d5a-8621-46db-84fd-e40155c975a1") },
                        new { Id = new Guid("deb20e71-e8c2-4f8a-90ed-21c3a009634b"), Code = "b8606f11-0081-430e-b189-3e3993db44f9", GameId = new Guid("00079ebc-97be-4649-a8b8-73833c949d6d") },
                        new { Id = new Guid("f50597f6-3e71-4b5c-b5bc-2c274919054d"), Code = "61e8c0f6-0b95-4f71-958f-0757ab5e30c1", GameId = new Guid("e4a83ca4-2859-419f-84c6-09e9fc293e89") },
                        new { Id = new Guid("919bef97-6971-4636-8df6-ec7cbd45899a"), Code = "03d24092-6329-477d-9af5-8ca0b1a6cc09", GameId = new Guid("f27c9614-ee32-47cf-8c26-861d65e6a18c") }
                    );
                });

            modelBuilder.Entity("GameStore.Model.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("Name");

                    b.Property<float>("Price");

                    b.Property<Guid>("PublisherId");

                    b.Property<float>("Rating");

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<string>("VideoUrl");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");

                    b.HasData(
                        new { Id = new Guid("d6995fd6-da72-4c31-aa75-f72bf7e9a5eb"), Content = "Good Game", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("b77c0f4d-c284-42d9-a05c-43b63a5278ab"), Rating = 4.5f, ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), VideoUrl = "URL Video here" },
                        new { Id = new Guid("ff6d2d5a-8621-46db-84fd-e40155c975a1"), Content = "Good Game", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("aa06f8f8-14c5-410d-a874-96ace077b75a"), Rating = 4.5f, ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), VideoUrl = "URL Video here" },
                        new { Id = new Guid("00079ebc-97be-4649-a8b8-73833c949d6d"), Content = "Good Game", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("0defb51f-87f6-4eac-95f1-8a9410955ed2"), Rating = 4.5f, ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), VideoUrl = "URL Video here" },
                        new { Id = new Guid("e4a83ca4-2859-419f-84c6-09e9fc293e89"), Content = "Good Game", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("0ba75576-ddd6-4217-a365-d878393a0120"), Rating = 4.5f, ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), VideoUrl = "URL Video here" },
                        new { Id = new Guid("f27c9614-ee32-47cf-8c26-861d65e6a18c"), Content = "Good Game", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("4a9c4886-aded-4545-a5cb-6d59efe16a64"), Rating = 4.5f, ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), VideoUrl = "URL Video here" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UrlLocal");

                    b.Property<string>("UrlOnline");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("GameStore.Model.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ImageId");

                    b.Property<int>("Money");

                    b.Property<string>("Name");

                    b.Property<int>("Reliability");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Publishers");

                    b.HasData(
                        new { Id = new Guid("b77c0f4d-c284-42d9-a05c-43b63a5278ab"), ImageId = new Guid("00000000-0000-0000-0000-000000000000"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("aa06f8f8-14c5-410d-a874-96ace077b75a"), ImageId = new Guid("00000000-0000-0000-0000-000000000000"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("0defb51f-87f6-4eac-95f1-8a9410955ed2"), ImageId = new Guid("00000000-0000-0000-0000-000000000000"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("0ba75576-ddd6-4217-a365-d878393a0120"), ImageId = new Guid("00000000-0000-0000-0000-000000000000"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("4a9c4886-aded-4545-a5cb-6d59efe16a64"), ImageId = new Guid("00000000-0000-0000-0000-000000000000"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("ef41de36-fa8b-4b09-a376-3fedfca7545a"), ImageId = new Guid("00000000-0000-0000-0000-000000000000"), Money = 10000000, Name = "Name here", Reliability = 5 }
                    );
                });

            modelBuilder.Entity("GameStore.Model.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Expire");

                    b.Property<string>("Token");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("GameStore.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<string>("Hobbies");

                    b.Property<Guid>("ImageId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new { Id = new Guid("8de39424-3f86-4054-b4f5-018637b87f47"), AccessFailedCount = 0, ConcurrencyStamp = "a64672cd-263a-42f9-b834-d453fc09a674", Email = "Email@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", ImageId = new Guid("00000000-0000-0000-0000-000000000000"), LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098509238098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName" },
                        new { Id = new Guid("b3c63488-14b3-4fa0-93a2-c1a5d5228075"), AccessFailedCount = 0, ConcurrencyStamp = "470b81fd-b3d2-4d55-9cd4-c9bdc2074113", Email = "Email1@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", ImageId = new Guid("00000000-0000-0000-0000-000000000000"), LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098509228098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName1" },
                        new { Id = new Guid("3abe46b9-dc06-4a1a-8e9f-7cc69881c6a5"), AccessFailedCount = 0, ConcurrencyStamp = "fd4a2249-c57b-43f8-bab4-b39665fefb6a", Email = "Email2@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", ImageId = new Guid("00000000-0000-0000-0000-000000000000"), LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098559238098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName2" },
                        new { Id = new Guid("16bb2e3b-68db-4d11-bad0-1106e14a3558"), AccessFailedCount = 0, ConcurrencyStamp = "5563374c-9d91-4bdc-be5e-b92fdb585cf0", Email = "Email3@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", ImageId = new Guid("00000000-0000-0000-0000-000000000000"), LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098609238098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName3" },
                        new { Id = new Guid("5319c4c2-f186-4db7-8e48-57c4d624248e"), AccessFailedCount = 0, ConcurrencyStamp = "95a74df1-448b-4042-9222-1b9415951f32", Email = "Email4@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", ImageId = new Guid("00000000-0000-0000-0000-000000000000"), LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098509738098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName4" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.UserGame", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GameId");

                    b.Property<DateTime>("PurchaseDate");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("UserGames");

                    b.HasData(
                        new { UserId = new Guid("8de39424-3f86-4054-b4f5-018637b87f47"), GameId = new Guid("d6995fd6-da72-4c31-aa75-f72bf7e9a5eb"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { UserId = new Guid("b3c63488-14b3-4fa0-93a2-c1a5d5228075"), GameId = new Guid("ff6d2d5a-8621-46db-84fd-e40155c975a1"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { UserId = new Guid("3abe46b9-dc06-4a1a-8e9f-7cc69881c6a5"), GameId = new Guid("00079ebc-97be-4649-a8b8-73833c949d6d"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { UserId = new Guid("16bb2e3b-68db-4d11-bad0-1106e14a3558"), GameId = new Guid("e4a83ca4-2859-419f-84c6-09e9fc293e89"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { UserId = new Guid("5319c4c2-f186-4db7-8e48-57c4d624248e"), GameId = new Guid("f27c9614-ee32-47cf-8c26-861d65e6a18c"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("GameStore.Model.WishGame", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GameId");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("WishGame");

                    b.HasData(
                        new { UserId = new Guid("8de39424-3f86-4054-b4f5-018637b87f47"), GameId = new Guid("d6995fd6-da72-4c31-aa75-f72bf7e9a5eb") },
                        new { UserId = new Guid("b3c63488-14b3-4fa0-93a2-c1a5d5228075"), GameId = new Guid("ff6d2d5a-8621-46db-84fd-e40155c975a1") },
                        new { UserId = new Guid("3abe46b9-dc06-4a1a-8e9f-7cc69881c6a5"), GameId = new Guid("00079ebc-97be-4649-a8b8-73833c949d6d") },
                        new { UserId = new Guid("16bb2e3b-68db-4d11-bad0-1106e14a3558"), GameId = new Guid("e4a83ca4-2859-419f-84c6-09e9fc293e89") },
                        new { UserId = new Guid("5319c4c2-f186-4db7-8e48-57c4d624248e"), GameId = new Guid("f27c9614-ee32-47cf-8c26-861d65e6a18c") }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GameStore.Model.Category", b =>
                {
                    b.HasOne("GameStore.Model.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.CategoryGame", b =>
                {
                    b.HasOne("GameStore.Model.Category", "Category")
                        .WithMany("Games")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("Categories")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.FreeCode", b =>
                {
                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("FreeCodes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.Game", b =>
                {
                    b.HasOne("GameStore.Model.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.Publisher", b =>
                {
                    b.HasOne("GameStore.Model.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.RefreshToken", b =>
                {
                    b.HasOne("GameStore.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.User", b =>
                {
                    b.HasOne("GameStore.Model.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.UserGame", b =>
                {
                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("Members")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.User", "User")
                        .WithMany("Games")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.WishGame", b =>
                {
                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("FavoriteMembers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.User", "User")
                        .WithMany("WishGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
