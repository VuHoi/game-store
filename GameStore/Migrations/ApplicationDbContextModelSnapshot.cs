// <auto-generated />
using System;
using GameStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameStore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GameStore.Model.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");

                    b.HasData(
                        new { Id = new Guid("9ac38f5a-8345-47f2-b856-348d7aed2d84"), ConcurrencyStamp = "User", Description = "Limited Permission", Name = "User", NormalizedName = "User" },
                        new { Id = new Guid("1afddfa2-9f74-4697-a03d-67fe99ba6425"), ConcurrencyStamp = "Admin", Description = "Full Permission", Name = "Admin", NormalizedName = "Admin" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Image");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = new Guid("a020afc5-9765-4ff7-aef0-fd63b0175ba8"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("ef79ece7-75d5-485c-9b39-a6f6a1dd30aa"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("e35502a2-c6d4-4b3c-9eba-ebe34b549dce"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("8b084066-1970-4667-8865-aac1347814a3"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("f8dd3cbe-14c9-4dc8-b1ef-ae9989e71c6e"), Image = "Url Image Here", Title = "Title here" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.CategoryGame", b =>
                {
                    b.Property<Guid>("GameId");

                    b.Property<Guid>("CategoryId");

                    b.HasKey("GameId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryGames");

                    b.HasData(
                        new { GameId = new Guid("35348799-44c4-4a55-b534-5c2adb80c484"), CategoryId = new Guid("a020afc5-9765-4ff7-aef0-fd63b0175ba8") },
                        new { GameId = new Guid("9b56717f-6d9f-4e10-83d0-dc399e6f1d21"), CategoryId = new Guid("ef79ece7-75d5-485c-9b39-a6f6a1dd30aa") },
                        new { GameId = new Guid("40ee69d3-43aa-49d9-bcac-d4c0b59b53be"), CategoryId = new Guid("e35502a2-c6d4-4b3c-9eba-ebe34b549dce") },
                        new { GameId = new Guid("294bc8df-fda4-4cef-8cd0-6cd7e4eebc17"), CategoryId = new Guid("8b084066-1970-4667-8865-aac1347814a3") },
                        new { GameId = new Guid("50146cf1-a579-4494-a57a-245b3e3a2782"), CategoryId = new Guid("f8dd3cbe-14c9-4dc8-b1ef-ae9989e71c6e") }
                    );
                });

            modelBuilder.Entity("GameStore.Model.CodeFree", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<Guid>("GameId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("CodeFrees");

                    b.HasData(
                        new { Id = new Guid("faec35ac-1312-469c-bf57-f41b55c151e3"), Code = "de1543d1-e13f-4d4a-b488-c11fcbebbc61", GameId = new Guid("35348799-44c4-4a55-b534-5c2adb80c484") },
                        new { Id = new Guid("23d01fb1-1f42-46f3-8d85-aabe02a22e53"), Code = "b04dec80-2c25-4b55-9440-402287b3e185", GameId = new Guid("9b56717f-6d9f-4e10-83d0-dc399e6f1d21") },
                        new { Id = new Guid("cdf97371-476f-4662-a985-301baeee0271"), Code = "c05418ce-9cc4-49c2-84bb-b718a8fa5597", GameId = new Guid("40ee69d3-43aa-49d9-bcac-d4c0b59b53be") },
                        new { Id = new Guid("aaa6c3dc-d9b2-4494-b3b0-ebfdc10a1d25"), Code = "4f1203a0-c4e5-4728-a2b0-4147790094d1", GameId = new Guid("294bc8df-fda4-4cef-8cd0-6cd7e4eebc17") },
                        new { Id = new Guid("15a4ed7e-e0cb-4204-ae35-0fff010891a7"), Code = "886eacb5-660f-4bd4-82c3-a360874d0f37", GameId = new Guid("50146cf1-a579-4494-a57a-245b3e3a2782") }
                    );
                });

            modelBuilder.Entity("GameStore.Model.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("Logo");

                    b.Property<string>("Name");

                    b.Property<float>("Price");

                    b.Property<Guid>("PublisherId");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<float>("Rating");

                    b.Property<string>("VideoUrl");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");

                    b.HasData(
                        new { Id = new Guid("35348799-44c4-4a55-b534-5c2adb80c484"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("ff641b0e-4ebf-4182-8147-cdd6846ef8f8"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Rating = 4.5f, VideoUrl = "URL Video here" },
                        new { Id = new Guid("9b56717f-6d9f-4e10-83d0-dc399e6f1d21"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("7f2b73f4-e33a-46db-a766-7d5cf4fab972"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Rating = 4.5f, VideoUrl = "URL Video here" },
                        new { Id = new Guid("40ee69d3-43aa-49d9-bcac-d4c0b59b53be"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("1a822a8c-f83e-4a28-9bb6-1dc65f8996f8"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Rating = 4.5f, VideoUrl = "URL Video here" },
                        new { Id = new Guid("294bc8df-fda4-4cef-8cd0-6cd7e4eebc17"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("bc3427fe-0bed-4c93-8769-ee852f5f1f23"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Rating = 4.5f, VideoUrl = "URL Video here" },
                        new { Id = new Guid("50146cf1-a579-4494-a57a-245b3e3a2782"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("450aca89-dc99-4b4b-b951-cf2b3529cb4a"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Rating = 4.5f, VideoUrl = "URL Video here" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Money");

                    b.Property<string>("Name");

                    b.Property<int>("Reliability");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new { Id = new Guid("ff641b0e-4ebf-4182-8147-cdd6846ef8f8"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("7f2b73f4-e33a-46db-a766-7d5cf4fab972"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("1a822a8c-f83e-4a28-9bb6-1dc65f8996f8"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("bc3427fe-0bed-4c93-8769-ee852f5f1f23"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("450aca89-dc99-4b4b-b951-cf2b3529cb4a"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("6124322f-0b9a-4f6a-b87e-0ea9e262d8eb"), Money = 10000000, Name = "Name here", Reliability = 5 }
                    );
                });

            modelBuilder.Entity("GameStore.Model.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Expire");

                    b.Property<string>("Token");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("GameStore.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<string>("Hobbies");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new { Id = new Guid("5b5afad4-1dae-4e6c-b6e8-f64b7f846c8d"), AccessFailedCount = 0, ConcurrencyStamp = "7cb1f3b7-b680-48de-b90b-130d2a993d27", Email = "Email@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098509238098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName" },
                        new { Id = new Guid("498b7597-88c3-4fe4-9e1d-c3c30c9d4689"), AccessFailedCount = 0, ConcurrencyStamp = "658aa2aa-7f3f-4461-b283-6daab6aa0519", Email = "Email1@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098509228098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName1" },
                        new { Id = new Guid("092f75a5-a2d0-4e99-9547-5b000a6b0a36"), AccessFailedCount = 0, ConcurrencyStamp = "c593210b-b0a4-437b-8b86-4351c72b23fa", Email = "Email2@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098559238098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName2" },
                        new { Id = new Guid("a9ae1345-0861-4dad-a310-5f671d73270b"), AccessFailedCount = 0, ConcurrencyStamp = "91d4e5f3-ce87-4ed6-a999-f4035788e9fe", Email = "Email3@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098609238098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName3" },
                        new { Id = new Guid("f85ae91f-bc8c-4389-92b2-714b08047904"), AccessFailedCount = 0, ConcurrencyStamp = "b11d24b9-97e9-436b-ab7a-9560f168391e", Email = "Email4@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098509738098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName4" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.UserGame", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GameId");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("UserGames");

                    b.HasData(
                        new { UserId = new Guid("5b5afad4-1dae-4e6c-b6e8-f64b7f846c8d"), GameId = new Guid("35348799-44c4-4a55-b534-5c2adb80c484") },
                        new { UserId = new Guid("498b7597-88c3-4fe4-9e1d-c3c30c9d4689"), GameId = new Guid("9b56717f-6d9f-4e10-83d0-dc399e6f1d21") },
                        new { UserId = new Guid("092f75a5-a2d0-4e99-9547-5b000a6b0a36"), GameId = new Guid("40ee69d3-43aa-49d9-bcac-d4c0b59b53be") },
                        new { UserId = new Guid("a9ae1345-0861-4dad-a310-5f671d73270b"), GameId = new Guid("294bc8df-fda4-4cef-8cd0-6cd7e4eebc17") },
                        new { UserId = new Guid("f85ae91f-bc8c-4389-92b2-714b08047904"), GameId = new Guid("50146cf1-a579-4494-a57a-245b3e3a2782") }
                    );
                });

            modelBuilder.Entity("GameStore.Model.WishGame", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GameId");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("WishGame");

                    b.HasData(
                        new { UserId = new Guid("5b5afad4-1dae-4e6c-b6e8-f64b7f846c8d"), GameId = new Guid("35348799-44c4-4a55-b534-5c2adb80c484") },
                        new { UserId = new Guid("498b7597-88c3-4fe4-9e1d-c3c30c9d4689"), GameId = new Guid("9b56717f-6d9f-4e10-83d0-dc399e6f1d21") },
                        new { UserId = new Guid("092f75a5-a2d0-4e99-9547-5b000a6b0a36"), GameId = new Guid("40ee69d3-43aa-49d9-bcac-d4c0b59b53be") },
                        new { UserId = new Guid("a9ae1345-0861-4dad-a310-5f671d73270b"), GameId = new Guid("294bc8df-fda4-4cef-8cd0-6cd7e4eebc17") },
                        new { UserId = new Guid("f85ae91f-bc8c-4389-92b2-714b08047904"), GameId = new Guid("50146cf1-a579-4494-a57a-245b3e3a2782") }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GameStore.Model.CategoryGame", b =>
                {
                    b.HasOne("GameStore.Model.Category", "Category")
                        .WithMany("Games")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("Categories")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.CodeFree", b =>
                {
                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("FreeCodes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.Game", b =>
                {
                    b.HasOne("GameStore.Model.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.RefreshToken", b =>
                {
                    b.HasOne("GameStore.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.UserGame", b =>
                {
                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("Members")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.User", "User")
                        .WithMany("Games")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.WishGame", b =>
                {
                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("FavoriteMembers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.User", "User")
                        .WithMany("WishGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
