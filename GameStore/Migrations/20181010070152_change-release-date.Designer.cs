// <auto-generated />
using System;
using GameStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameStore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181010070152_change-release-date")]
    partial class changereleasedate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GameStore.Model.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");

                    b.HasData(
                        new { Id = new Guid("6ca7b411-d6cf-45a4-9361-4b2553b550f8"), ConcurrencyStamp = "User", Description = "Limited Permission", Name = "User", NormalizedName = "User" },
                        new { Id = new Guid("8af59830-cb9b-4adc-a3e9-131f11bd4e98"), ConcurrencyStamp = "Admin", Description = "Full Permission", Name = "Admin", NormalizedName = "Admin" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Image");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = new Guid("df4b987f-f4c7-4580-beeb-f587287791c4"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("6dadbea0-319b-4a1b-ad94-555802c98947"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("be660cc7-11e0-4996-909d-cb41cff57a1f"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("2285c65d-e625-47f5-85a1-73e37a21871f"), Image = "Url Image Here", Title = "Title here" },
                        new { Id = new Guid("3db017a2-8176-4af8-a1d5-5a35bb1de638"), Image = "Url Image Here", Title = "Title here" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.CategoryGame", b =>
                {
                    b.Property<Guid>("GameId");

                    b.Property<Guid>("CategoryId");

                    b.HasKey("GameId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryGames");

                    b.HasData(
                        new { GameId = new Guid("db273dca-5f7f-4b8f-96c6-eec3f27ede0f"), CategoryId = new Guid("df4b987f-f4c7-4580-beeb-f587287791c4") },
                        new { GameId = new Guid("16261a90-1bdb-40f9-935e-c132c6896f6c"), CategoryId = new Guid("6dadbea0-319b-4a1b-ad94-555802c98947") },
                        new { GameId = new Guid("ee3a459b-5d61-4a28-a1f3-e83060010670"), CategoryId = new Guid("be660cc7-11e0-4996-909d-cb41cff57a1f") },
                        new { GameId = new Guid("7b346739-54fc-48ab-8a87-fe10184aa272"), CategoryId = new Guid("2285c65d-e625-47f5-85a1-73e37a21871f") },
                        new { GameId = new Guid("099cd90f-3dd6-48a8-b00a-657c376ed065"), CategoryId = new Guid("3db017a2-8176-4af8-a1d5-5a35bb1de638") }
                    );
                });

            modelBuilder.Entity("GameStore.Model.CodeFree", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<Guid>("GameId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("CodeFrees");

                    b.HasData(
                        new { Id = new Guid("fa33906b-e090-4592-94ac-d33194669b64"), Code = "6d6fefbd-d1b2-455f-8a30-051945825895", GameId = new Guid("db273dca-5f7f-4b8f-96c6-eec3f27ede0f") },
                        new { Id = new Guid("3a4ca50f-852e-4a92-b074-661e6ae0ceeb"), Code = "54f36847-6dd4-4955-88f6-d2848e161afb", GameId = new Guid("16261a90-1bdb-40f9-935e-c132c6896f6c") },
                        new { Id = new Guid("7890f1e6-86d4-4ce4-8259-9b92817c1b53"), Code = "e24f2264-6c70-4639-8f99-a07e071f26cf", GameId = new Guid("ee3a459b-5d61-4a28-a1f3-e83060010670") },
                        new { Id = new Guid("4ffa12c3-e4c1-4f07-a364-f30ec43e21ef"), Code = "6b1f7d09-81e0-450a-8e19-4d0d638adf28", GameId = new Guid("7b346739-54fc-48ab-8a87-fe10184aa272") },
                        new { Id = new Guid("ad377c0e-a2f8-4283-85e4-1bee7b04725d"), Code = "bc63fcfc-247f-468c-a9a9-d5bbaa75e3a8", GameId = new Guid("099cd90f-3dd6-48a8-b00a-657c376ed065") }
                    );
                });

            modelBuilder.Entity("GameStore.Model.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("Logo");

                    b.Property<string>("Name");

                    b.Property<float>("Price");

                    b.Property<Guid>("PublisherId");

                    b.Property<float>("Rating");

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<string>("VideoUrl");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");

                    b.HasData(
                        new { Id = new Guid("db273dca-5f7f-4b8f-96c6-eec3f27ede0f"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("bb30687b-d36b-4c33-abb3-632965ace082"), Rating = 4.5f, ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), VideoUrl = "URL Video here" },
                        new { Id = new Guid("16261a90-1bdb-40f9-935e-c132c6896f6c"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("63b54cd7-de42-4609-953a-017eeb6785fb"), Rating = 4.5f, ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), VideoUrl = "URL Video here" },
                        new { Id = new Guid("ee3a459b-5d61-4a28-a1f3-e83060010670"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("fa62cafa-7938-440d-8fb7-2f7bd6301d70"), Rating = 4.5f, ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), VideoUrl = "URL Video here" },
                        new { Id = new Guid("7b346739-54fc-48ab-8a87-fe10184aa272"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("720656bb-5f30-4d28-b085-c40418558219"), Rating = 4.5f, ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), VideoUrl = "URL Video here" },
                        new { Id = new Guid("099cd90f-3dd6-48a8-b00a-657c376ed065"), Content = "Good Game", Logo = "URL Logo here", Name = "Name Of Game", Price = 100000f, PublisherId = new Guid("6a3dee87-896d-498f-9538-0c9a32878543"), Rating = 4.5f, ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), VideoUrl = "URL Video here" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Money");

                    b.Property<string>("Name");

                    b.Property<int>("Reliability");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new { Id = new Guid("bb30687b-d36b-4c33-abb3-632965ace082"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("63b54cd7-de42-4609-953a-017eeb6785fb"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("fa62cafa-7938-440d-8fb7-2f7bd6301d70"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("720656bb-5f30-4d28-b085-c40418558219"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("6a3dee87-896d-498f-9538-0c9a32878543"), Money = 10000000, Name = "Name here", Reliability = 5 },
                        new { Id = new Guid("3d6869b6-d175-4c0e-8c72-614aa318058a"), Money = 10000000, Name = "Name here", Reliability = 5 }
                    );
                });

            modelBuilder.Entity("GameStore.Model.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Expire");

                    b.Property<string>("Token");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("GameStore.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<string>("Hobbies");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new { Id = new Guid("612bf5a6-0dc0-434e-aa44-e1a8faf6c2f1"), AccessFailedCount = 0, ConcurrencyStamp = "7d4a7a5c-cca6-449f-8c7b-10cb3eb18ac1", Email = "Email@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098509238098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName" },
                        new { Id = new Guid("51625e1c-b444-4b3b-92dd-d3ecf132e16e"), AccessFailedCount = 0, ConcurrencyStamp = "fcb4b1fe-7949-4d4c-98e1-426acd522aa7", Email = "Email1@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098509228098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName1" },
                        new { Id = new Guid("5d30395d-2c1c-4a8f-817d-fabbe52294d6"), AccessFailedCount = 0, ConcurrencyStamp = "ca2a94af-3b6c-4690-84cc-e4565c40c144", Email = "Email2@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098559238098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName2" },
                        new { Id = new Guid("fb40bd8f-22b1-447b-a168-d9dab225874b"), AccessFailedCount = 0, ConcurrencyStamp = "75956d5e-38b7-435e-b3b9-986a9a26de97", Email = "Email3@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098609238098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName3" },
                        new { Id = new Guid("5f5129c9-a340-44bb-bb24-8fc13c2cb028"), AccessFailedCount = 0, ConcurrencyStamp = "87517926-261d-4378-b6fd-978bc5369275", Email = "Email4@gmail.com", EmailConfirmed = false, FullName = "Full Name", Hobbies = "Hobbies", LockoutEnabled = false, PasswordHash = "Thatvuhai_7595", PhoneNumber = "93098509738098523", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "UserName4" }
                    );
                });

            modelBuilder.Entity("GameStore.Model.UserGame", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GameId");

                    b.Property<DateTime>("PurchaseDate");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("UserGames");

                    b.HasData(
                        new { UserId = new Guid("612bf5a6-0dc0-434e-aa44-e1a8faf6c2f1"), GameId = new Guid("db273dca-5f7f-4b8f-96c6-eec3f27ede0f"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { UserId = new Guid("51625e1c-b444-4b3b-92dd-d3ecf132e16e"), GameId = new Guid("16261a90-1bdb-40f9-935e-c132c6896f6c"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { UserId = new Guid("5d30395d-2c1c-4a8f-817d-fabbe52294d6"), GameId = new Guid("ee3a459b-5d61-4a28-a1f3-e83060010670"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { UserId = new Guid("fb40bd8f-22b1-447b-a168-d9dab225874b"), GameId = new Guid("7b346739-54fc-48ab-8a87-fe10184aa272"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { UserId = new Guid("5f5129c9-a340-44bb-bb24-8fc13c2cb028"), GameId = new Guid("099cd90f-3dd6-48a8-b00a-657c376ed065"), PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("GameStore.Model.WishGame", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GameId");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("WishGame");

                    b.HasData(
                        new { UserId = new Guid("612bf5a6-0dc0-434e-aa44-e1a8faf6c2f1"), GameId = new Guid("db273dca-5f7f-4b8f-96c6-eec3f27ede0f") },
                        new { UserId = new Guid("51625e1c-b444-4b3b-92dd-d3ecf132e16e"), GameId = new Guid("16261a90-1bdb-40f9-935e-c132c6896f6c") },
                        new { UserId = new Guid("5d30395d-2c1c-4a8f-817d-fabbe52294d6"), GameId = new Guid("ee3a459b-5d61-4a28-a1f3-e83060010670") },
                        new { UserId = new Guid("fb40bd8f-22b1-447b-a168-d9dab225874b"), GameId = new Guid("7b346739-54fc-48ab-8a87-fe10184aa272") },
                        new { UserId = new Guid("5f5129c9-a340-44bb-bb24-8fc13c2cb028"), GameId = new Guid("099cd90f-3dd6-48a8-b00a-657c376ed065") }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GameStore.Model.CategoryGame", b =>
                {
                    b.HasOne("GameStore.Model.Category", "Category")
                        .WithMany("Games")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("Categories")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.CodeFree", b =>
                {
                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("FreeCodes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.Game", b =>
                {
                    b.HasOne("GameStore.Model.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.RefreshToken", b =>
                {
                    b.HasOne("GameStore.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.UserGame", b =>
                {
                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("Members")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.User", "User")
                        .WithMany("Games")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameStore.Model.WishGame", b =>
                {
                    b.HasOne("GameStore.Model.Game", "Game")
                        .WithMany("FavoriteMembers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.User", "User")
                        .WithMany("WishGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GameStore.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
